{"version":3,"sources":["components/AddCategory.js","helpers/getApi.js","hooks/useFetchApi.js","components/ApiGridItem.js","components/ApiGrid.js","ApiExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","category","type","value","onChange","target","getApi","a","url_api","encodeURI","fetch","response","json","results","api","map","id","title","name","species","url","image","propTypes","PropTypes","string","useFetchApi","data","loading","state","setState","useEffect","then","catch","error","console","warn","GifGridItem","className","src","alt","ApiGrid","images","ApiGridItem","ApiExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAoCeA,EAjCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAbW,SAACC,GAElBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAACS,GAAD,OAAeP,GAAf,mBAA6BO,OAC3CN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GAAD,OAAWF,EAAcE,EAAMQ,OAAOF,a,+CCL9DG,EAAM,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DAELC,EAFK,yDAEuDC,UAAUR,IAFjE,SAGYS,MAAMF,GAHlB,cAGLG,EAHK,gBAIeA,EAASC,OAJxB,uBAIHC,EAJG,EAIHA,QAEFC,EAAMD,EAAQE,KAAI,YACpB,MAAO,CACHC,GAFkD,EAA/BA,GAGnBC,MAHkD,EAA3BC,KAIvBC,QAJkD,EAArBA,QAK7BC,IALkD,EAAZC,UANnC,kBAeJP,GAfI,4CAAH,sDAkBZR,EAAOgB,UAAY,CACfrB,SAAUsB,IAAUC,QAGTlB,QCpBTmB,EAAc,SAACxB,GACjB,MAA0BR,mBAAS,CAC/BiC,KAAM,GACNC,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WACNxB,EAAOL,GACF8B,MAAK,SAACpB,GACHkB,EAAS,CACLH,KAAMf,EACNgB,SAAS,OAGhBK,OAAM,SAACC,GACJC,QAAQC,KAAKF,QAEtB,CAAChC,IAEG2B,GAIXH,EAAYH,UAAY,CACpBrB,SAAUsB,IAAUC,QAGTC,QCPAW,EArBK,SAAC,GAA6B,IAA3BnB,EAA0B,EAA1BA,MAAOG,EAAmB,EAAnBA,IAAKD,EAAc,EAAdA,QAE/B,OACI,sBAAKkB,UAAU,OAAf,UACI,qBAAKC,IAAKlB,EAAKmB,IAAKtB,IACpB,gCACI,6BAAKA,IACL,4BAAIE,WCsBLqB,EA3BC,SAAC,GAAgB,IAAfvC,EAAc,EAAdA,SAEd,EAAkCwB,EAAYxB,GAAhCwC,EAAd,EAAQf,KAAcC,EAAtB,EAAsBA,QAEtB,OACI,qCACI,6BAAM1B,IACJ0B,GAAW,mBAAGU,UAAU,GAAb,wBAEb,qBAAKA,UAAU,iDAAf,SAEQI,EAAO1B,KAAI,SAACM,GAAD,OACP,cAACqB,EAAD,eAEQrB,GADCA,EAAML,aCUxB2B,EAxBM,WAEjB,MAAoClD,mBAAS,IAA7C,mBAAOmD,EAAP,KAAmBpD,EAAnB,KAEA,OACI,qCACG,oDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAESoD,EAAW7B,KAAI,SAACd,GAAD,OACX,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCXjC4C,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d48b8f71.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (event) => setInputValue(event.target.value);\r\n\r\n    const handleSubmit = (event) => {\r\n        \r\n        event.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n\r\n            setCategories((category) => [inputValue,...category]);\r\n            setInputValue('');\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddCategory\r\n","import PropTypes from 'prop-types'\r\n\r\nconst getApi = async (category) => {\r\n\r\n    const url_api = `https://rickandmortyapi.com/api/character?name=${encodeURI(category)}`;\r\n    const response = await fetch(url_api);\r\n    const { results } = await response.json();\r\n\r\n    const api = results.map(({ id, name, species, image }) => {\r\n        return {\r\n            id,\r\n            title: name,\r\n            species,\r\n            url: image,\r\n        }\r\n    });\r\n\r\n    return api;\r\n}\r\n\r\ngetApi.propTypes = {\r\n    category: PropTypes.string,\r\n}\r\n\r\nexport default getApi\r\n","import { useEffect, useState } from 'react'\r\nimport getApi from '../helpers/getApi';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst useFetchApi = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getApi(category)\r\n            .then((response) => {\r\n                setState({\r\n                    data: response,\r\n                    loading: false,\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.warn(error)\r\n            })\r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n\r\n\r\nuseFetchApi.propTypes = {\r\n    category: PropTypes.string,\r\n}\r\n\r\nexport default useFetchApi\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ({ title, url, species }) => {\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <div>\r\n                <h2>{title}</h2>\r\n                <p>{species}</p>\r\n            </div>\r\n            \r\n            \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    url: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport useFetchApi from '../hooks/useFetchApi'\r\nimport ApiGridItem from '../components/ApiGridItem'\r\n\r\nconst ApiGrid = ({category}) => {\r\n\r\n    const { data: images, loading } = useFetchApi(category)\r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n            { loading && <p className=\"\">loading...</p> }\r\n            \r\n            <div className=\"card-grid animate__animated animate__headShake\">\r\n                {\r\n                    images.map((image) => (\r\n                        <ApiGridItem\r\n                            key={image.id} \r\n                            {...image}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nApiGrid.propTypes = {\r\n    category: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default ApiGrid\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport ApiGrid from './components/ApiGrid'\r\n\r\nconst ApiExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <>\r\n           <h3>Rick and Morty API</h3>\r\n           <AddCategory setCategories={setCategories}/> \r\n           <hr/>\r\n\r\n           <ol>\r\n               {    \r\n                    categories.map((category) => (\r\n                        <ApiGrid \r\n                            key={category} \r\n                            category={category}\r\n                        />\r\n                   ))\r\n               }\r\n           </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ApiExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApiExpertApp from './ApiExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n    <ApiExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}